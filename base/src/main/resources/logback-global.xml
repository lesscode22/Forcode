<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
                 当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration  scan="true" scanPeriod="100 seconds">

    <springProperty scope="context" name="applicationName" source="spring.application.name" />
    <springProperty scope="context" name="graylogHost" source="logging.graylog.host" />
    <springProperty scope="context" name="graylogPort" source="logging.graylog.port" />

    <!-- property定义参数, 后面可以通过${}引用 -->
    <!-- 输出日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="%red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %highlight(%-5level) %green([%thread]) %boldMagenta(%logger{50}) - %cyan(%msg%n)"/>
    <!-- 日志输出文件位置 -->
    <property name="LOG_HOME" value="F:/data" />
<!--    <property name="LOG_HOME" value="/home/frestream" />-->

    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 此日志appender是为开发使用，只配置最低级别，控制台输出的日志级别是大于等于此级别的日志信息 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>
            <!-- 引用上面定义的日志输出格式 -->
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 输出到 Graylog -->
    <appender name="GELF" class="de.siegmar.logbackgelf.GelfUdpAppender">
        <!-- Graylog服务的地址 -->
        <graylogHost>${graylogHost}</graylogHost>
        <!-- UDP Input端口 -->
        <graylogPort>${graylogPort}</graylogPort>
        <!-- 最大GELF数据块大小（单位：字节），508为建议最小值，最大值为65467 -->
        <maxChunkSize>508</maxChunkSize>
        <!-- 是否使用压缩 -->
        <useCompression>true</useCompression>
        <encoder class="de.siegmar.logbackgelf.GelfEncoder">
            <!-- 是否发送原生的日志信息 -->
            <includeRawMessage>false</includeRawMessage>
            <includeMarker>true</includeMarker>
            <includeMdcData>true</includeMdcData>
            <includeCallerData>false</includeCallerData>
            <includeRootCauseData>false</includeRootCauseData>
            <!-- 是否发送日志级别的名称，否则默认以数字代表日志级别 -->
            <includeLevelName>true</includeLevelName>
            <shortPatternLayout class="ch.qos.logback.classic.PatternLayout">
                <pattern>%m%nopex</pattern>
            </shortPatternLayout>
            <fullPatternLayout class="ch.qos.logback.classic.PatternLayout">
                <pattern>%d - [%thread] %-5level %logger{35} - %msg%n</pattern>
            </fullPatternLayout>

            <!-- 配置应用名称（服务名称），通过staticField标签可以自定义一些固定的日志字段 -->
            <staticField>app_name:${applicationName}</staticField>
            <staticField>ip:$X{ip}</staticField>
        </encoder>
    </appender>

    <!-- 输出到文件  -->
<!--    <appender name="timeFileOutput" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;日志名,指定最新的文件名，其他文件名使用FileNamePattern &ndash;&gt;-->
<!--        <File>${LOG_HOME}/logFile/out.log</File>-->
<!--        &lt;!&ndash;文件滚动模式&ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--            &lt;!&ndash;日志文件输出的文件名,可设置文件类型为gz,开启文件压缩&ndash;&gt;-->
<!--            <FileNamePattern>${LOG_HOME}/logFile/info.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>-->
<!--            &lt;!&ndash;日志文件保留天数&ndash;&gt;-->
<!--            <MaxHistory>30</MaxHistory>-->
<!--            &lt;!&ndash;单文件大小&ndash;&gt;-->
<!--            <maxFileSize>100MB</maxFileSize>-->
<!--            &lt;!&ndash;总日志文件大小, 超过上限后, 旧日志档案会被异步删除&ndash;&gt;-->
<!--            <totalSizeCap>10GB</totalSizeCap>-->
<!--            &lt;!&ndash;重启时清理文件&ndash;&gt;-->
<!--            <cleanHistoryOnStart>true</cleanHistoryOnStart>-->
<!--        </rollingPolicy>-->

<!--        &lt;!&ndash;输出格式&ndash;&gt;-->
<!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            &lt;!&ndash;格式化输出&ndash;&gt;-->
<!--            <pattern>${CONSOLE_LOG_PATTERN}</pattern>-->
<!--            &lt;!&ndash;设置编码&ndash;&gt;-->
<!--            <charset>UTF-8</charset>-->
<!--            &lt;!&ndash; 开启缓存 &ndash;&gt;-->
<!--            <ImmediateFlush>false</ImmediateFlush>-->
<!--        </encoder>-->

<!--    </appender>-->

    <!-- 异步配置 -->
    <appender name ="ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的是如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="CONSOLE"/>
    </appender>

    <!-- 开发环境输出至控制台 -->
    <springProfile name="dev">
        <root level="DEBUG">
            <appender-ref ref="CONSOLE" />
<!--            <appender-ref ref="ASYNC" />-->
<!--            <appender-ref ref="GELF" />-->
        </root>

        <!-- 输出日志细粒度控制, 去掉一些debug日志 -->
<!--        <logger name="org.springframework" level="INFO" additivity="false">-->
<!--            <appender-ref ref="CONSOLE" />-->
<!--        </logger>-->
        <logger name="io.netty" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="io.lettuce" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="com.alibaba.nacos.client" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="com.ulisesbocchio.jasyptspringboot" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
    </springProfile>

    <!-- 生产环境输出至文件和Graylog -->
    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="CONSOLE" />
<!--            <appender-ref ref="GELF" />-->
            <appender-ref ref="ASYNC" />
        </root>
    </springProfile>

</configuration>
